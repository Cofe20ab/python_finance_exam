# Load Initial Values and Covariance Matrix
import pandas as pd

# Load the initial values and covariance matrix files
init_values_path = "/mnt/data/init_values.xlsx"
cov_matrix_path = "/mnt/data/covariance_matrix.xlsx"

# Load data from the files
init_values = pd.read_excel(init_values_path, sheet_name=None)
cov_matrix = pd.read_excel(cov_matrix_path, index_col=0)

# Extract initial values for relevant variables
init_values_df = init_values['Sheet1']

# Display initial values for reference
print(init_values_df.head())
print(cov_matrix.head())


# Define Mean Vector (Î¼)
import numpy as np

# Define delta t (weekly step in years)
delta_t = 1 / 52

# Compute the mean vector (mu)
# First element is 0 (log(FX)), second 0.07 * delta_t (US equities), third 0.06 * delta_t (EUR equities)
# The rest are 0s as per the problem
mu = np.zeros(cov_matrix.shape[0])
mu[1] = 0.07 * delta_t  # US equities
mu[2] = 0.06 * delta_t  # EUR equities

print("Mean Vector (mu):", mu)


# Simulate Weekly Evolution
# Number of weeks in a year
weeks = 52

# Extract the covariance matrix as a NumPy array
sigma = cov_matrix.values

# Simulate weekly changes using multivariate normal distribution
np.random.seed(42)  # For reproducibility
simulated_deltas = np.random.multivariate_normal(mu, sigma * delta_t, weeks)

# Calculate cumulative sum to simulate log(FX_t) evolution
log_fx_t = np.cumsum(simulated_deltas[:, 0]) + init_values_df.loc[0, 'initial values']

# Prepare data for visualization
simulation_data = pd.DataFrame({
    "Week": np.arange(1, weeks + 1),
    "Log(FX_t)": log_fx_t
})

print(simulation_data.head())


# Visualize Weekly Evolution of log(FXt)
import matplotlib.pyplot as plt

# Plotting the evolution of Log(FX_t)
plt.figure(figsize=(10, 6))
plt.plot(simulation_data["Week"], simulation_data["Log(FX_t)"], label="Log(FX_t)", linewidth=2)
plt.title("Weekly Evolution of Log(FX_t)", fontsize=14)
plt.xlabel("Week", fontsize=12)
plt.ylabel("Log(FX_t)", fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend(fontsize=12)
plt.show()
